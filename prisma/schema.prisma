// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
  output   = "./node_modules/@kanamigame/prisma-client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id          Int             @id @default(autoincrement())
  username         String          @unique @db.VarChar(50)
  email            String          @unique @db.VarChar(100)
  password_hash    String          @db.VarChar(255)
  created_at       DateTime        @default(now()) @db.Timestamp()
  last_login       DateTime?       @db.Timestamp()
  is_active        Boolean         @default(true)
  profile_image    String?         @db.VarChar(255)
  progress         UserProgress[]
  sessionLogs      SessionLog[]
  kanjiProgress    UserKanjiProgress[]
  achievements     Achievement[]

  @@map("users")
  @@index([user_id], name: "idx_users_id")
}

model KanaGroup {
  group_id      Int         @id @default(autoincrement())
  name          String      @db.VarChar(50)
  description   String?     @db.Text
  display_order Int
  is_hiragana   Boolean
  kanas         Kana[]
  sessionLogs   SessionLog[]

  @@map("kana_groups")
}

model Kana {
  kana_id       Int           @id @default(autoincrement())
  character     String        @db.VarChar(10)
  romaji        String        @db.VarChar(10)
  group_id      Int?
  display_order Int
  group         KanaGroup?    @relation(fields: [group_id], references: [group_id])
  variants      KanaVariant[]
  progress      UserProgress[]

  @@map("kanas")
  @@index([group_id], name: "idx_kanas_group_id")
}

model KanaVariant {
  variant_id    Int     @id @default(autoincrement())
  base_kana_id  Int?
  character     String  @db.VarChar(10)
  romaji        String  @db.VarChar(10)
  variant_type  String  @db.VarChar(20) // ex: 'dakuten', 'handakuten', 'yoon', 'dakuten-yoon', 'handakuten-yoon', 'foreign', 'foreign-combo'
  base_kana     Kana?   @relation(fields: [base_kana_id], references: [kana_id])

  @@map("kana_variants")
  @@index([base_kana_id], name: "idx_variants_base_kana_id")
}

model SessionLog {
  session_id      Int        @id @default(autoincrement())
  user_id         Int?
  start_time      DateTime   @default(now()) @db.Timestamp()
  end_time        DateTime?  @db.Timestamp()
  group_id        Int?
  correct_answers Int        @default(0)
  wrong_answers   Int        @default(0)
  user            User?      @relation(fields: [user_id], references: [user_id])
  group           KanaGroup? @relation(fields: [group_id], references: [group_id])

  @@map("session_logs")
  @@index([user_id], name: "idx_session_logs_user_id")
}

// Modifiez temporairement le modèle pour forcer la régénération
model UserProgress {
  progress_id     Int       @id @default(autoincrement())
  user_id         Int
  kana_id         Int
  correct_count   Int       @default(0)
  incorrect_count Int       @default(0)
  last_practiced  DateTime? @db.Timestamp()
  mastery_level   Int       @default(0)
  user            User      @relation(fields: [user_id], references: [user_id])
  kana            Kana      @relation(fields: [kana_id], references: [kana_id])

  @@map("user_progress")
  @@index([user_id], name: "idx_user_progress_user_id")
  @@index([kana_id], name: "idx_user_progress_kana_id")
}

model KanjiLevel {
  level_id      Int     @id @default(autoincrement())
  name          String  @db.VarChar(20)
  description   String? @db.Text
  display_order Int
  kanjis        Kanji[]

  @@map("kanji_levels")
}

model Kanji {
  kanji_id      Int               @id @default(autoincrement())
  character     String            @db.VarChar(10)
  level_id      Int?
  strokes       Int
  jlpt_level    Int?
  school_grade  Int?
  level         KanjiLevel?       @relation(fields: [level_id], references: [level_id])
  readings      KanjiReading[]
  meanings      KanjiMeaning[]
  examples      KanjiExample[]
  progress      UserKanjiProgress[]

  @@map("kanjis")
}

model KanjiReading {
  reading_id   Int      @id @default(autoincrement())
  kanji_id     Int?
  reading      String   @db.VarChar(50)
  reading_type String   @db.VarChar(10) // 'onyomi' ou 'kunyomi'
  is_common    Boolean  @default(true)
  kanji        Kanji?   @relation(fields: [kanji_id], references: [kanji_id])

  @@map("kanji_readings")
}

model KanjiMeaning {
  meaning_id    Int      @id @default(autoincrement())
  kanji_id      Int?
  meaning       String   @db.VarChar(100)
  language_code String   @default("fr") @db.VarChar(5)
  is_primary    Boolean  @default(false)
  kanji         Kanji?   @relation(fields: [kanji_id], references: [kanji_id])

  @@map("kanji_meanings")
}

model KanjiExample {
  example_id    Int     @id @default(autoincrement())
  kanji_id      Int?
  word          String  @db.VarChar(50)
  reading       String  @db.VarChar(50)
  meaning       String? @db.VarChar(100)
  kanji         Kanji?  @relation(fields: [kanji_id], references: [kanji_id])

  @@map("kanji_examples")
}

model UserKanjiProgress {
  progress_id     Int       @id @default(autoincrement())
  user_id         Int
  kanji_id        Int
  correct_count   Int       @default(0)
  incorrect_count Int       @default(0)
  last_practiced  DateTime? @db.Timestamp()
  mastery_level   Int       @default(0)
  user            User      @relation(fields: [user_id], references: [user_id])
  kanji           Kanji     @relation(fields: [kanji_id], references: [kanji_id])

  @@map("user_kanji_progress")
}

model Achievement {
  achievement_id Int       @id @default(autoincrement())
  title          String    @db.VarChar(50)
  description    String    @db.Text
  icon           String?   @db.VarChar(100)
  created_at     DateTime  @default(now()) @db.Timestamp()
  user_id        Int
  user           User      @relation(fields: [user_id], references: [user_id])
  
  @@map("achievements")
  @@index([user_id], name: "idx_achievements_user_id")
}