generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id       Int                 @id @default(autoincrement())
  username      String              @unique @db.VarChar(50)
  email         String              @unique @db.VarChar(100)
  password_hash String              @db.VarChar(255)
  created_at    DateTime?           @default(now()) @db.Timestamp(6)
  last_login    DateTime?           @db.Timestamp(6)
  is_active     Boolean?            @default(true)
  profile_image String?             @db.VarChar(255)
  achievements  Achievement[]
  sessionLogs   SessionLog[]
  kanjiProgress UserKanjiProgress[]
  progress      UserProgress[]

  @@map("users")
}

model KanaGroup {
  group_id      Int          @id @default(autoincrement())
  name          String       @db.VarChar(50)
  description   String?
  display_order Int
  is_hiragana   Boolean
  kanas         Kana[]
  sessionLogs   SessionLog[]

  @@map("kana_groups")
}

model Kana {
  kana_id       Int            @id @default(autoincrement())
  character     String         @db.VarChar(10)
  romaji        String         @db.VarChar(10)
  group_id      Int?
  display_order Int
  variants      KanaVariant[]
  group         KanaGroup?     @relation(fields: [group_id], references: [group_id], onDelete: NoAction, onUpdate: NoAction)
  progress      UserProgress[]

  @@map("kanas")
}

model KanaVariant {
  variant_id   Int    @id @default(autoincrement())
  base_kana_id Int?
  character    String @db.VarChar(10)
  romaji       String @db.VarChar(10)
  variant_type String @db.VarChar(20)
  base_kana    Kana?  @relation(fields: [base_kana_id], references: [kana_id], onDelete: NoAction, onUpdate: NoAction)

  @@map("kana_variants")
}

model SessionLog {
  session_id      Int        @id @default(autoincrement())
  user_id         Int?
  start_time      DateTime?  @default(now()) @db.Timestamp(6)
  end_time        DateTime?  @db.Timestamp(6)
  group_id        Int?
  correct_answers Int?       @default(0)
  wrong_answers   Int?       @default(0)
  group           KanaGroup? @relation(fields: [group_id], references: [group_id], onDelete: NoAction, onUpdate: NoAction)
  user            User?      @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)

  @@map("session_logs")
}

model UserProgress {
  progress_id     Int       @id @default(autoincrement())
  user_id         Int?
  kana_id         Int?
  correct_count   Int?      @default(0)
  incorrect_count Int?      @default(0)
  last_practiced  DateTime? @db.Timestamp(6)
  mastery_level   Int?      @default(0)
  kana            Kana?     @relation(fields: [kana_id], references: [kana_id], onDelete: NoAction, onUpdate: NoAction)
  user            User?     @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)

  @@map("user_progress")
}

model KanjiLevel {
  level_id      Int     @id @default(autoincrement())
  name          String  @db.VarChar(20)
  description   String?
  display_order Int
  kanjis        Kanji[]

  @@map("kanji_levels")
}

model Kanji {
  kanji_id     Int                 @id @default(autoincrement())
  character    String              @db.VarChar(10)
  level_id     Int?
  strokes      Int
  jlpt_level   Int?
  school_grade Int?
  examples     KanjiExample[]
  meanings     KanjiMeaning[]
  readings     KanjiReading[]
  level        KanjiLevel?         @relation(fields: [level_id], references: [level_id], onDelete: NoAction, onUpdate: NoAction)
  progress     UserKanjiProgress[]

  @@map("kanjis")
}

model KanjiReading {
  reading_id   Int      @id @default(autoincrement())
  kanji_id     Int?
  reading      String   @db.VarChar(50)
  reading_type String   @db.VarChar(10)
  is_common    Boolean? @default(true)
  kanji        Kanji?   @relation(fields: [kanji_id], references: [kanji_id], onDelete: NoAction, onUpdate: NoAction)

  @@map("kanji_readings")
}

model KanjiMeaning {
  meaning_id    Int      @id @default(autoincrement())
  kanji_id      Int?
  meaning       String   @db.VarChar(100)
  language_code String?  @default("fr") @db.VarChar(5)
  is_primary    Boolean? @default(false)
  kanji         Kanji?   @relation(fields: [kanji_id], references: [kanji_id], onDelete: NoAction, onUpdate: NoAction)

  @@map("kanji_meanings")
}

model KanjiExample {
  example_id    Int     @id @default(autoincrement())
  kanji_id      Int?
  word          String  @db.VarChar(50)
  reading       String  @db.VarChar(50)
  meaning       String? @db.VarChar(100)
  language_code String? @default("fr") @db.VarChar(5)
  kanji         Kanji?  @relation(fields: [kanji_id], references: [kanji_id], onDelete: NoAction, onUpdate: NoAction)

  @@map("kanji_examples")
}

model UserKanjiProgress {
  progress_id     Int       @id @default(autoincrement())
  user_id         Int?
  kanji_id        Int?
  correct_count   Int?      @default(0)
  incorrect_count Int?      @default(0)
  last_practiced  DateTime? @db.Timestamp(6)
  mastery_level   Int?      @default(0)
  kanji           Kanji?    @relation(fields: [kanji_id], references: [kanji_id], onDelete: NoAction, onUpdate: NoAction)
  user            User?     @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)

  @@map("user_kanji_progress")
}

model Achievement {
  achievement_id Int       @id @default(autoincrement())
  title          String    @db.VarChar(50)
  description    String
  icon           String?   @db.VarChar(100)
  created_at     DateTime? @default(now()) @db.Timestamp(6)
  user_id        Int?
  user           User?     @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)

  @@map("achievements")
}
